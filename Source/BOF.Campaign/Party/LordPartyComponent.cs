using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;
using Clan = BOF.Campaign.Faction.Clan;
using MobileParty = BOF.Campaign.Party.MobileParty;
using PartyComponent = BOF.Campaign.Party.PartyComponent;
using WarPartyComponent = BOF.Campaign.Party.WarPartyComponent;

namespace BOF.Campaign.Party
{
  public class LordPartyComponent : WarPartyComponent
  {
    [CachedData]
    private TextObject _cachedName;

    public LordPartyComponent(Hero owner) => this.Owner = owner;

    public override Hero PartyOwner => this.Owner;

    public override TextObject Name => this._cachedName ?? (this._cachedName = this.Owner != null ? this.GetPartyName() : new TextObject("{=!}unnamedMobileParty"));

    public override Settlement HomeSettlement => this.Owner.HomeSettlement;


    public Hero Owner { get; private set; }

    public static void AutoGeneratedStaticCollectObjectsLordPartyComponent(
      object o,
      List<object> collectedObjects)
    {
      ((PartyComponent) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    public override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
      base.AutoGeneratedInstanceCollectObjects(collectedObjects);
      collectedObjects.Add((object) this.Owner);
    }

    public static object AutoGeneratedGetMemberValueOwner(object o) => (object) ((LordPartyComponent) o).Owner;

    public static MobileParty CreateLordParty(
      string stringId,
      Hero hero,
      Vec2 position,
      float spawnRadius,
      Settlement spawnSettlement)
    {
      return MobileParty.CreateParty(hero.CharacterObject.StringId + "_party_1", (PartyComponent) new LordPartyComponent(hero), (PartyComponent.OnPartyComponentCreatedDelegate) (mobileParty => mobileParty.LordPartyComponent.InitializeLordPartyProperties(mobileParty, position, spawnRadius, spawnSettlement)));
    }

    public void ChangePartyOwner(Hero owner)
    {
      this.ClearCachedName();
      this.Owner = owner;
    }

    [LoadInitializationCallback]
    private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
    {
      if (this.Owner != null)
        return;
      this.Owner = objectLoadData.GetDataBySaveId(20) as Hero;
    }

    public override void ClearCachedName() => this._cachedName = (TextObject) null;

    private TextObject GetPartyName()
    {
      TextObject to = new TextObject("{=shL0WElC}{TROOP.NAME}'s Party");
      to.SetCharacterProperties("TROOP", this.Owner.CharacterObject);
      to.SetTextVariable("IS_LORDPARTY", 1);
      return to;
    }

    private void InitializeLordPartyProperties(
      MobileParty mobileParty,
      Vec2 position,
      float spawnRadius,
      Settlement spawnSettlement)
    {
      mobileParty.AddElementToMemberRoster(this.Owner.CharacterObject, 1, true);
      mobileParty.ActualClan = this.Owner.Clan;
      int troopNumberLimit = this.Owner == Hero.MainHero || this.Owner.Clan == Clan.PlayerClan ? 0 : (int) Math.Min(this.Owner.Clan.IsRebelClan ? 40f : 19f, (this.Owner.Clan.IsRebelClan ? 0.2f : 0.1f) * (float) mobileParty.Party.PartySizeLimit);
      if (!Campaign.Current.GameStarted)
      {
        double num = 1.0 - (double) MBRandom.RandomFloat * Math.Sqrt((double) MBRandom.RandomFloat);
        troopNumberLimit = (int) ((double) mobileParty.Party.PartySizeLimit * num);
      }
      mobileParty.InitializeMobileParty(this.Owner.Clan.DefaultPartyTemplate, position, spawnRadius, troopNumberLimit: troopNumberLimit);
      mobileParty.Party.Visuals.SetMapIconAsDirty();
      if (spawnSettlement != null)
        mobileParty.SetMoveGoToSettlement(spawnSettlement);
      mobileParty.Aggressiveness = (float) (0.899999976158142 + 0.100000001490116 * (double) this.Owner.GetTraitLevel(DefaultTraits.Valor) - 0.0500000007450581 * (double) this.Owner.GetTraitLevel(DefaultTraits.Mercy));
      mobileParty.ItemRoster.Add(new ItemRosterElement(DefaultItems.Grain, MBRandom.RandomInt(15, 30)));
      this.Owner.PassedTimeAtHomeSettlement = (float) (int) ((double) MBRandom.RandomFloat * 100.0);
      if (spawnSettlement == null)
        return;
      mobileParty.Ai.SetAIState(AIState.VisitingNearbyTown);
      mobileParty.SetMoveGoToSettlement(spawnSettlement);
    }
  }
}